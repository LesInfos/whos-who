{"ast":null,"code":"import _asyncToGenerator from \"M:/August Cohort/angular-whos-who-aug-2024-team-4/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { NavigationStart } from \"@angular/router\";\nimport fetchFromSpotify from \"../../services/api\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../components/button/button.component\";\n\nfunction PlayComponent_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Your Score: \", ctx_r0.points, \"\");\n  }\n}\n\nfunction PlayComponent_app_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-button\", 8);\n    i0.ɵɵlistener(\"click\", function PlayComponent_app_button_10_Template_app_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const option_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.setAnswer(option_r3));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"buttonText\", option_r3)(\"ngClass\", ctx_r1.buttonColorControl(option_r3));\n  }\n}\n\nfunction PlayComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Correct!\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction PlayComponent_div_11_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1, \"Incorrect! Game over!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PlayComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtemplate(1, PlayComponent_div_11_div_1_Template, 3, 0, \"div\", 10);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtemplate(3, PlayComponent_div_11_ng_template_3_Template, 2, 0, \"ng-template\", null, 11, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelement(6, \"img\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"app-button\", 2);\n    i0.ɵɵlistener(\"click\", function PlayComponent_div_11_Template_app_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.handleContinue());\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const _r7 = i0.ɵɵreference(4);\n\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.selectedAnswer === ctx_r2.correctArtist)(\"ngIfElse\", _r7);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"src\", ctx_r2.track.album.images[1].url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"buttonText\", \"Continue\");\n  }\n}\n\nexport class PlayComponent {\n  constructor(route, router) {\n    this.route = route;\n    this.router = router;\n    this.choices = 1;\n    this.options = [];\n    this.correctArtist = \"\";\n    this.genre = \"\";\n    this.token = \"\";\n    this.audio = null;\n    this.volume = 0.5;\n    this.selectedAnswer = null;\n    this.routerSubscription = null;\n    this.points = 0;\n    this.roundCounter = 1;\n    this.currentTime = 0;\n    this.duration = 0;\n    this.difficulty = \"\";\n    this.artistList = {\n      Pop: [\"Taylor Swift\", \"Justin Bieber\"],\n      Rock: [\"Linkin Park\", \"The Neighbourhood\", \"Deftones\", \"Green Day\", \"Red Hot Chili Peppers\", \"Metallica\", \"Radiohead\", \"Dominic Fike\", \"System Of A Down\", \"Nickelback\", \"Paramore\", \"Slipknot\", \"Gorillaz\", \"Cage The Elephant\", \"My Chemical Romance\", \"Three Days Grace\", \"Bring Me The Horizon\", \"Led Zeppelin\", \"AC/DC\", \"Foo Fighters\", \"Muse\", \"Alice in Chains\", \"Rage Against the Machine\", \"Nirvana\", \"The Rolling Stones\", \"Pearl Jam\", \"The Smashing Pumpkins\", \"Arctic Monkeys\", \"The Killers\", \"Oasis\", \"The Strokes\", \"Kings of Leon\", \"The Black Keys\", \"Soundgarden\", \"The Who\", \"The White Stripes\", \"Guns N' Roses\", \"The Doors\", \"Creedence Clearwater Revival\", \"Lynyrd Skynyrd\", \"Boston\", \"Scorpions\", \"Bon Jovi\", \"Eagles\", \"The Clash\", \"U2\", \"The Offspring\", \"Weezer\", \"Journey\", \"Blink-182\", \"Bad Religion\", \"Fleetwood Mac\"],\n      [\"J-pop\"]: [\"Aimer\", \"amazarashi\", \"Ariabl'eyeS\", \"BUMP OF CHICKEN\", \"ClariS\", \"Creepy Nuts\", \"DECO*27\", \"Dongdang\", \"EGOIST\", \"Fear, and Loathing in Las Vegas\", \"fripSide\", \"GALNERYUS\", \"GARNiDELiA\", \"Gen Hoshino\", \"Goose house\", \"HIMEHINA\", \"Hikaru Utada\", \"Hoshimachi Suisei\", \"iroha(sasaki)\", \"Itou Kanako\", \"Iyowa\", \"Kalafina\", \"Kanaria\", \"Kenshi Yonezu\", \"Kikuo\", \"King Gnu\", \"Linked Horizon\", \"MAISONdes\", \"MAN WITH A MISSION\", \"Masatoshi Ono\", \"mikanzil\", \"Midnight Grand Orchestra\", \"MYTH & ROID\", \"natori\", \"NEEDY GIRL OVERDOSE\", \"OxT\", \"PSYQUI\", \"RADWIMPS\", \"Reol\", \"Ryokuoushoku Shakai\", \"sasakure.UK\", \"Sangatsu no Phantasia\", \"supercell\", \"sumika\", \"takayan\", \"THE ORAL CIGARETTES\", \"TK from Ling tosite sigure\", \"TOOBOE\", \"TrySail\", \"Unlucky Morpheus\", \"UNISON SQUARE GARDEN\", \"VK Blanka\", \"WagakkiBand\", \"wotaku\", \"yanaginagi\", \"Yoshida Yasei\", \"Yunosuke\", \"YOASOBI\", \"μ's\"]\n    };\n  }\n\n  ngOnInit() {\n    this.routerSubscription = this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        const navigation = this.router.getCurrentNavigation();\n\n        if (navigation?.extras.state) {\n          this.genre = navigation.extras.state['genre'];\n          this.token = navigation.extras.state['token'];\n          this.fetchFirstTrack();\n        }\n      }\n    });\n  }\n\n  fetchFirstTrack() {\n    this.fetchTrackFromSpotify().then(newTrack => {\n      if (newTrack && newTrack.preview_url) {\n        this.setupNewGameRound(newTrack, this.artistList[this.genre]);\n      } else {\n        console.error(\"No track preview available for the selected artist.\" + this.correctArtist);\n        this.fetchFirstTrack(); // Retry if no preview is available\n      }\n    });\n  }\n\n  loadNewTrack() {\n    this.selectedAnswer = null;\n    this.fetchTrackFromSpotify().then(newTrack => {\n      if (newTrack && newTrack.preview_url) {\n        this.setupNewGameRound(newTrack, this.artistList[this.genre]);\n      } else {\n        console.error(\"No track preview available for the selected artist.\" + this.correctArtist);\n        this.loadNewTrack(); // Retry if no preview is available\n      }\n    });\n  }\n\n  setupNewGameRound(track, artistList) {\n    this.track = track;\n    this.correctArtist = track.artists[0].name;\n    this.duration = 0;\n    this.currentTime = 0;\n\n    if (this.audio) {\n      this.audio.pause();\n    }\n\n    this.audio = new Audio(this.track.preview_url);\n    this.audio.volume = this.volume;\n    this.progressBar();\n    const numOptions = this.choices;\n    const wrongChoices = artistList.filter(artist => artist !== this.correctArtist);\n    const shuffledChoices = this.shuffleArray([...wrongChoices]).slice(0, numOptions - 1);\n    shuffledChoices.push(this.correctArtist);\n    this.options = this.shuffleArray(shuffledChoices);\n  } // setupGame(track: any, artists: string[]) {\n  //   const numOptions = this.choices;\n  //   const correctArtist = track.artists[0].name;\n  //   // Create wrong choices\n  //   const wrongChoices = artists.filter((artist) => artist !== correctArtist);\n  //   const shuffledChoices = this.shuffleArray([...wrongChoices]).slice(\n  //     0,\n  //     numOptions - 1\n  //   );\n  //   shuffledChoices.push(correctArtist);\n  //   // Shuffle all options\n  //   const options = this.shuffleArray(shuffledChoices);\n  //   // Set up the game state\n  //   this.track = track;\n  //   this.options = options;\n  //   this.correctArtist = correctArtist;\n  //   console.log(\"Game setup complete with state:\", {\n  //     track: track,\n  //     options: options,\n  //     correctArtist: correctArtist,\n  //     genre: this.genre,\n  //     token: this.token,\n  //   });\n  // }\n\n\n  fetchTrackFromSpotify() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const artists = _this.artistList[_this.genre];\n      const randomArtist = artists[Math.floor(Math.random() * artists.length)];\n      const endpoint = `search`;\n      const params = {\n        q: `artist:${randomArtist}`,\n        type: \"track\",\n        limit: 10\n      };\n      const data = yield fetchFromSpotify({\n        token: _this.token,\n        endpoint,\n        params\n      });\n      return data.tracks.items[Math.floor(Math.random() * data.tracks.items.length)];\n    })();\n  }\n\n  shuffleArray(array) {\n    return array.sort(() => Math.random() - 0.5);\n  }\n\n  ngOnDestroy() {\n    // Unsubscribe from router events to prevent memory leaks\n    if (this.routerSubscription) {\n      this.routerSubscription.unsubscribe();\n    }\n  }\n\n  pauseAudio() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  playAudio() {\n    // const audio = new Audio(this.track.preview_url);\n    // audio.play();\n    if (this.audio) {\n      if (this.audio.paused) {\n        this.audio.play();\n      } else {\n        this.audio.pause();\n      }\n    } else {\n      this.audio = new Audio(this.track.preview_url);\n      this.audio.volume = this.volume;\n      this.audio.play();\n      this.progressBar();\n    }\n  } // the progress bar is updated based on the current time and the duration of the song\n\n\n  progressBar() {\n    if (this.audio) {\n      this.audio.addEventListener(\"timeupdate\", this.updateProgress.bind(this));\n      this.audio.addEventListener(\"loadedmetadata\", () => {\n        this.duration = this.audio.duration;\n      });\n    }\n  }\n\n  updateProgress() {\n    if (this.audio) {\n      this.currentTime = this.audio.currentTime;\n    }\n  }\n\n  setVolume(event) {\n    const inputElement = event.target;\n\n    if (inputElement) {\n      const volume = parseFloat(inputElement.value);\n\n      if (!isNaN(volume)) {\n        this.volume = volume;\n\n        if (this.audio) {\n          this.audio.volume = this.volume;\n        } // console.log(\"Volume changed to:\", this.volume);\n\n      }\n    }\n  }\n\n  setAnswer(option) {\n    if (!this.selectedAnswer) {\n      this.selectedAnswer = option;\n\n      if (this.selectedAnswer === this.correctArtist) {\n        this.points += 1;\n      }\n    }\n  }\n\n  handleContinue() {\n    // if the answer is correct, next round\n    if (this.selectedAnswer === this.correctArtist) {\n      console.log(\"Correct answer! Points:\", this.points);\n      this.roundCounter++;\n      this.loadNewTrack();\n    } // else game over\n    else {\n      console.log(\"Incorrect answer. Navigating to gameover with points:\", this.points);\n      this.router.navigate([\"gameover\"], {\n        state: {\n          points: this.points\n        }\n      });\n    }\n  }\n\n  buttonColorControl(option) {\n    // if the user has not selected an answer, return a blank class\n    if (!this.selectedAnswer) {\n      return \"\";\n    } // if the user has selected an answer, return the appropriate class\n\n\n    if (option === this.selectedAnswer) {\n      return this.selectedAnswer === this.correctArtist ? \"correct\" : \"incorrect\";\n    } // if the user has not selected the answer, return the correct class\n\n\n    if (option === this.correctArtist) {\n      return \"correct\";\n    } // if the user has not selected the answer, return a blank class\n\n\n    return \"\";\n  }\n\n}\n\nPlayComponent.ɵfac = function PlayComponent_Factory(t) {\n  return new (t || PlayComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router));\n};\n\nPlayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PlayComponent,\n  selectors: [[\"app-play\"]],\n  decls: 12,\n  vars: 8,\n  consts: [[1, \"main-container\"], [4, \"ngIf\"], [3, \"buttonText\", \"click\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"1\", \"step\", \"0.01\", 3, \"value\", \"input\"], [3, \"value\", \"max\"], [1, \"options-container\"], [3, \"buttonText\", \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"selected-answer\", 4, \"ngIf\"], [3, \"buttonText\", \"ngClass\", \"click\"], [1, \"selected-answer\"], [4, \"ngIf\", \"ngIfElse\"], [\"incorrectText\", \"\"], [\"alt\", \"Album Art\", 1, \"album-art\", 3, \"src\"]],\n  template: function PlayComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Guess the Artist\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"p\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, PlayComponent_p_5_Template, 2, 1, \"p\", 1);\n      i0.ɵɵelementStart(6, \"app-button\", 2);\n      i0.ɵɵlistener(\"click\", function PlayComponent_Template_app_button_click_6_listener() {\n        return ctx.playAudio();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 3);\n      i0.ɵɵlistener(\"input\", function PlayComponent_Template_input_input_7_listener($event) {\n        return ctx.setVolume($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"progress\", 4);\n      i0.ɵɵelementStart(9, \"div\", 5);\n      i0.ɵɵtemplate(10, PlayComponent_app_button_10_Template, 1, 2, \"app-button\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, PlayComponent_div_11_Template, 8, 4, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"Round: \", ctx.roundCounter, \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.points > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"buttonText\", \"Play/Pause\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.volume);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.currentTime)(\"max\", ctx.duration);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.options);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.selectedAnswer);\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.ButtonComponent],\n  styles: [\".options-container[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-wrap: wrap;\\r\\n  gap: 10px; \\r\\n}\\r\\n\\r\\n  app-button.correct button {\\r\\n  background-color: #1db954 !important;\\r\\n  color: white !important;\\r\\n}\\r\\n\\r\\n  app-button.incorrect button {\\r\\n  background-color: red !important;\\r\\n  color: white !important;\\r\\n}\\r\\n\\r\\n.selected-answer[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  flex-direction: column;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n.album-art[_ngcontent-%COMP%] {\\r\\n  width: 200px; \\r\\n  height: auto;\\r\\n  border-radius: 10px; \\r\\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.5), 0 0 20px rgba(255, 255, 255, 0.4), 0 0 30px rgba(255, 255, 255, 0.3);\\r\\n  transition: box-shadow 0.3s ease-in-out;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYXkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixlQUFlO0VBQ2YsU0FBUyxFQUFFLDZDQUE2QztBQUMxRDs7QUFFQTtFQUNFLG9DQUFvQztFQUNwQyx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxnQ0FBZ0M7RUFDaEMsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixzQkFBc0I7RUFDdEIsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsWUFBWSxFQUFFLDhCQUE4QjtFQUM1QyxZQUFZO0VBQ1osbUJBQW1CLEVBQUUsa0NBQWtDO0VBQ3ZELGtIQUFrSDtFQUNsSCx1Q0FBdUM7QUFDekMiLCJmaWxlIjoicGxheS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm9wdGlvbnMtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtd3JhcDogd3JhcDtcclxuICBnYXA6IDEwcHg7IC8qIEFkanVzdCB0aGUgZ2FwIGJldHdlZW4gYnV0dG9ucyBhcyBuZWVkZWQgKi9cclxufVxyXG5cclxuOjpuZy1kZWVwIGFwcC1idXR0b24uY29ycmVjdCBidXR0b24ge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZGI5NTQgIWltcG9ydGFudDtcclxuICBjb2xvcjogd2hpdGUgIWltcG9ydGFudDtcclxufVxyXG5cclxuOjpuZy1kZWVwIGFwcC1idXR0b24uaW5jb3JyZWN0IGJ1dHRvbiB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkICFpbXBvcnRhbnQ7XHJcbiAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5zZWxlY3RlZC1hbnN3ZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcblxyXG4uYWxidW0tYXJ0IHtcclxuICB3aWR0aDogMjAwcHg7IC8qIEFkanVzdCB0aGUgc2l6ZSBhcyBuZWVkZWQgKi9cclxuICBoZWlnaHQ6IGF1dG87XHJcbiAgYm9yZGVyLXJhZGl1czogMTBweDsgLyogT3B0aW9uYWw6IGZvciByb3VuZGVkIGNvcm5lcnMgKi9cclxuICBib3gtc2hhZG93OiAwIDAgNXB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgMCAwIDIwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpLCAwIDAgMzBweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XHJcbiAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjNzIGVhc2UtaW4tb3V0O1xyXG59XHJcbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["NavigationStart","fetchFromSpotify","i0","ctx_r1","_r7","PlayComponent","constructor","route","router","Pop","Rock","ngOnInit","routerSubscription","events","subscribe","event","navigation","getCurrentNavigation","extras","state","genre","token","fetchFirstTrack","fetchTrackFromSpotify","then","newTrack","preview_url","setupNewGameRound","artistList","console","error","correctArtist","loadNewTrack","selectedAnswer","track","artists","name","duration","currentTime","audio","pause","Audio","volume","progressBar","numOptions","choices","wrongChoices","filter","artist","shuffledChoices","shuffleArray","slice","push","options","randomArtist","Math","floor","random","length","endpoint","params","q","type","limit","data","tracks","items","array","sort","ngOnDestroy","unsubscribe","pauseAudio","Error","playAudio","paused","play","addEventListener","updateProgress","bind","setVolume","inputElement","target","parseFloat","value","isNaN","setAnswer","option","points","handleContinue","log","roundCounter","navigate","buttonColorControl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["M:\\August Cohort\\angular-whos-who-aug-2024-team-4\\src\\app\\play\\play.component.ts","M:\\August Cohort\\angular-whos-who-aug-2024-team-4\\src\\app\\play\\play.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router, NavigationStart } from \"@angular/router\";\r\nimport { Subscription } from \"rxjs\";\r\nimport fetchFromSpotify from \"../../services/api\";\r\n\r\ntype Genre = \"Pop\" | \"Rock\" | \"J-pop\"; // Add other genres as needed.\r\n\r\n@Component({\r\n  selector: \"app-play\",\r\n  templateUrl: \"./play.component.html\",\r\n  styleUrls: [\"./play.component.css\"],\r\n})\r\nexport class PlayComponent implements OnInit {\r\n  track: any;\r\n  choices = 1;\r\n  options: string[] = [];\r\n  correctArtist: string = \"\";\r\n  genre: string = \"\";\r\n  token: string = \"\";\r\n  audio: HTMLAudioElement | null = null;\r\n  volume: number = 0.5;\r\n  selectedAnswer: string | null = null;\r\n  routerSubscription: Subscription | null = null;\r\n  points: number = 0;\r\n  roundCounter: number = 1;\r\n  currentTime: number = 0;\r\n  duration: number = 0;\r\n  difficulty: string = \"\";\r\n  artistList: { [key: string]: string[] } = {\r\n    Pop: [\"Taylor Swift\", \"Justin Bieber\"],\r\n    Rock: [\r\n      \"Linkin Park\",\r\n      \"The Neighbourhood\",\r\n      \"Deftones\",\r\n      \"Green Day\",\r\n      \"Red Hot Chili Peppers\",\r\n      \"Metallica\",\r\n      \"Radiohead\",\r\n      \"Dominic Fike\",\r\n      \"System Of A Down\",\r\n      \"Nickelback\",\r\n      \"Paramore\",\r\n      \"Slipknot\",\r\n      \"Gorillaz\",\r\n      \"Cage The Elephant\",\r\n      \"My Chemical Romance\",\r\n      \"Three Days Grace\",\r\n      \"Bring Me The Horizon\",\r\n      \"Led Zeppelin\",\r\n      \"AC/DC\",\r\n      \"Foo Fighters\",\r\n      \"Muse\",\r\n      \"Alice in Chains\",\r\n      \"Rage Against the Machine\",\r\n      \"Nirvana\",\r\n      \"The Rolling Stones\",\r\n      \"Pearl Jam\",\r\n      \"The Smashing Pumpkins\",\r\n      \"Arctic Monkeys\",\r\n      \"The Killers\",\r\n      \"Oasis\",\r\n      \"The Strokes\",\r\n      \"Kings of Leon\",\r\n      \"The Black Keys\",\r\n      \"Soundgarden\",\r\n      \"The Who\",\r\n      \"The White Stripes\",\r\n      \"Guns N' Roses\",\r\n      \"The Doors\",\r\n      \"Creedence Clearwater Revival\",\r\n      \"Lynyrd Skynyrd\",\r\n      \"Boston\",\r\n      \"Scorpions\",\r\n      \"Bon Jovi\",\r\n      \"Eagles\",\r\n      \"The Clash\",\r\n      \"U2\",\r\n      \"The Offspring\",\r\n      \"Weezer\",\r\n      \"Journey\",\r\n      \"Blink-182\",\r\n      \"Bad Religion\",\r\n      \"Fleetwood Mac\",\r\n    ],\r\n    [\"J-pop\"]: [\r\n      \"Aimer\",\r\n      \"amazarashi\",\r\n      \"Ariabl'eyeS\",\r\n      \"BUMP OF CHICKEN\",\r\n      \"ClariS\",\r\n      \"Creepy Nuts\",\r\n      \"DECO*27\",\r\n      \"Dongdang\",\r\n      \"EGOIST\",\r\n      \"Fear, and Loathing in Las Vegas\",\r\n      \"fripSide\",\r\n      \"GALNERYUS\",\r\n      \"GARNiDELiA\",\r\n      \"Gen Hoshino\",\r\n      \"Goose house\",\r\n      \"HIMEHINA\",\r\n      \"Hikaru Utada\",\r\n      \"Hoshimachi Suisei\",\r\n      \"iroha(sasaki)\",\r\n      \"Itou Kanako\",\r\n      \"Iyowa\",\r\n      \"Kalafina\",\r\n      \"Kanaria\",\r\n      \"Kenshi Yonezu\",\r\n      \"Kikuo\",\r\n      \"King Gnu\",\r\n      \"Linked Horizon\",\r\n      \"MAISONdes\",\r\n      \"MAN WITH A MISSION\",\r\n      \"Masatoshi Ono\",\r\n      \"mikanzil\",\r\n      \"Midnight Grand Orchestra\",\r\n      \"MYTH & ROID\",\r\n      \"natori\",\r\n      \"NEEDY GIRL OVERDOSE\",\r\n      \"OxT\",\r\n      \"PSYQUI\",\r\n      \"RADWIMPS\",\r\n      \"Reol\",\r\n      \"Ryokuoushoku Shakai\",\r\n      \"sasakure.UK\",\r\n      \"Sangatsu no Phantasia\",\r\n      \"supercell\",\r\n      \"sumika\",\r\n      \"takayan\",\r\n      \"THE ORAL CIGARETTES\",\r\n      \"TK from Ling tosite sigure\",\r\n      \"TOOBOE\",\r\n      \"TrySail\",\r\n      \"Unlucky Morpheus\",\r\n      \"UNISON SQUARE GARDEN\",\r\n      \"VK Blanka\",\r\n      \"WagakkiBand\",\r\n      \"wotaku\",\r\n      \"yanaginagi\",\r\n      \"Yoshida Yasei\",\r\n      \"Yunosuke\",\r\n      \"YOASOBI\",\r\n      \"μ's\"\r\n    ],\r\n  };\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.routerSubscription = this.router.events.subscribe((event) => {\r\n      if (event instanceof NavigationStart) {\r\n        const navigation = this.router.getCurrentNavigation();\r\n        if (navigation?.extras.state) {\r\n          this.genre = navigation.extras.state['genre'];\r\n          this.token = navigation.extras.state['token'];\r\n          this.fetchFirstTrack();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  fetchFirstTrack(): void {\r\n    this.fetchTrackFromSpotify().then((newTrack) => {\r\n      if (newTrack && newTrack.preview_url) {\r\n        this.setupNewGameRound(newTrack, this.artistList[this.genre]);\r\n      } else {\r\n        console.error(\r\n          \"No track preview available for the selected artist.\" +\r\n            this.correctArtist\r\n        );\r\n        this.fetchFirstTrack(); // Retry if no preview is available\r\n      }\r\n    });\r\n  }\r\n\r\n  loadNewTrack(): void {\r\n    this.selectedAnswer = null;\r\n    this.fetchTrackFromSpotify().then((newTrack) => {\r\n      if (newTrack && newTrack.preview_url) {\r\n        this.setupNewGameRound(newTrack, this.artistList[this.genre]);\r\n      } else {\r\n        console.error(\r\n          \"No track preview available for the selected artist.\" +\r\n            this.correctArtist\r\n        );\r\n        this.loadNewTrack(); // Retry if no preview is available\r\n      }\r\n    });\r\n  }\r\n\r\n  setupNewGameRound(track: any, artistList: string[]) {\r\n    this.track = track;\r\n    this.correctArtist = track.artists[0].name;\r\n    this.duration = 0;\r\n    this.currentTime = 0;\r\n    if (this.audio) {\r\n      this.audio.pause();\r\n    }\r\n    this.audio = new Audio(this.track.preview_url);\r\n    this.audio.volume = this.volume;\r\n    this.progressBar();\r\n\r\n    const numOptions = this.choices;\r\n    const wrongChoices = artistList.filter(\r\n      (artist) => artist !== this.correctArtist\r\n    );\r\n    const shuffledChoices = this.shuffleArray([...wrongChoices]).slice(\r\n      0,\r\n      numOptions - 1\r\n    );\r\n    shuffledChoices.push(this.correctArtist);\r\n\r\n    this.options = this.shuffleArray(shuffledChoices);\r\n  }\r\n\r\n  // setupGame(track: any, artists: string[]) {\r\n  //   const numOptions = this.choices;\r\n  //   const correctArtist = track.artists[0].name;\r\n\r\n  //   // Create wrong choices\r\n  //   const wrongChoices = artists.filter((artist) => artist !== correctArtist);\r\n  //   const shuffledChoices = this.shuffleArray([...wrongChoices]).slice(\r\n  //     0,\r\n  //     numOptions - 1\r\n  //   );\r\n  //   shuffledChoices.push(correctArtist);\r\n\r\n  //   // Shuffle all options\r\n  //   const options = this.shuffleArray(shuffledChoices);\r\n\r\n  //   // Set up the game state\r\n  //   this.track = track;\r\n  //   this.options = options;\r\n  //   this.correctArtist = correctArtist;\r\n\r\n  //   console.log(\"Game setup complete with state:\", {\r\n  //     track: track,\r\n  //     options: options,\r\n  //     correctArtist: correctArtist,\r\n  //     genre: this.genre,\r\n  //     token: this.token,\r\n  //   });\r\n  // }\r\n\r\n  private async fetchTrackFromSpotify(): Promise<any> {\r\n    const artists = this.artistList[this.genre as string];\r\n    const randomArtist = artists[Math.floor(Math.random() * artists.length)];\r\n    const endpoint = `search`;\r\n    const params = {\r\n      q: `artist:${randomArtist}`,\r\n      type: \"track\",\r\n      limit: 10,\r\n    };\r\n\r\n    const data = await fetchFromSpotify({ token: this.token, endpoint, params });\r\n    return data.tracks.items[Math.floor(Math.random() * data.tracks.items.length)];\r\n  }\r\n\r\n  shuffleArray(array: any[]) {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // Unsubscribe from router events to prevent memory leaks\r\n    if (this.routerSubscription) {\r\n      this.routerSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  pauseAudio() {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  playAudio() {\r\n    // const audio = new Audio(this.track.preview_url);\r\n    // audio.play();\r\n    if (this.audio) {\r\n      if (this.audio.paused) {\r\n        this.audio.play();\r\n      } else {\r\n        this.audio.pause();\r\n      }\r\n    } else {\r\n      this.audio = new Audio(this.track.preview_url);\r\n      this.audio.volume = this.volume;\r\n      this.audio.play();\r\n      this.progressBar();\r\n    }\r\n  }\r\n\r\n  // the progress bar is updated based on the current time and the duration of the song\r\n  progressBar() {\r\n    if (this.audio) {\r\n      this.audio.addEventListener(\"timeupdate\", this.updateProgress.bind(this));\r\n      this.audio.addEventListener(\"loadedmetadata\", () => {\r\n        this.duration = this.audio!.duration;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateProgress(): void {\r\n    if (this.audio) {\r\n      this.currentTime = this.audio.currentTime;\r\n    }\r\n  }\r\n\r\n  setVolume(event: Event): void {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    if (inputElement) {\r\n      const volume = parseFloat(inputElement.value);\r\n      if (!isNaN(volume)) {\r\n        this.volume = volume;\r\n        if (this.audio) {\r\n          this.audio.volume = this.volume;\r\n        }\r\n        // console.log(\"Volume changed to:\", this.volume);\r\n      }\r\n    }\r\n  }\r\n\r\n  setAnswer(option: string): void {\r\n    if (!this.selectedAnswer) {\r\n      this.selectedAnswer = option;\r\n      if (this.selectedAnswer === this.correctArtist) {\r\n        this.points += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  handleContinue(): void {\r\n    // if the answer is correct, next round\r\n    if (this.selectedAnswer === this.correctArtist) {\r\n      console.log(\"Correct answer! Points:\", this.points);\r\n      this.roundCounter++;\r\n      this.loadNewTrack();\r\n    }\r\n    // else game over\r\n    else {\r\n      console.log(\r\n        \"Incorrect answer. Navigating to gameover with points:\",\r\n        this.points\r\n      );\r\n      this.router.navigate([\"gameover\"], { state: { points: this.points } });\r\n    }\r\n  }\r\n\r\n  buttonColorControl(option: string): string {\r\n    // if the user has not selected an answer, return a blank class\r\n    if (!this.selectedAnswer) {\r\n      return \"\";\r\n    }\r\n    // if the user has selected an answer, return the appropriate class\r\n    if (option === this.selectedAnswer) {\r\n      return this.selectedAnswer === this.correctArtist\r\n        ? \"correct\"\r\n        : \"incorrect\";\r\n    }\r\n    // if the user has not selected the answer, return the correct class\r\n    if (option === this.correctArtist) {\r\n      return \"correct\";\r\n    }\r\n    // if the user has not selected the answer, return a blank class\r\n    return \"\";\r\n  }\r\n\r\n  // shuffleArray(array: any[]) {\r\n  //   return array.sort(() => Math.random() - 0.5);\r\n  // }\r\n}\r\n","<div class=\"main-container\">\r\n  <h2>Guess the Artist</h2>\r\n  <p>Round: {{ roundCounter }}</p>\r\n  <p *ngIf=\"points > 0\">Your Score: {{ points }}</p>\r\n  <app-button [buttonText]=\"'Play/Pause'\" (click)=\"playAudio()\"></app-button>\r\n  <input\r\n    type=\"range\"\r\n    min=\"0\"\r\n    max=\"1\"\r\n    step=\"0.01\"\r\n    [value]=\"volume\"\r\n    (input)=\"setVolume($event)\"\r\n  />\r\n  <progress [value]=\"currentTime\" [max]=\"duration\"></progress>\r\n  <div class=\"options-container\">\r\n    <app-button\r\n      *ngFor=\"let option of options\"\r\n      [buttonText]=\"option\"\r\n      [ngClass]=\"buttonColorControl(option)\"\r\n      (click)=\"setAnswer(option)\"\r\n    ></app-button>\r\n  </div>\r\n  <div *ngIf=\"selectedAnswer\" class=\"selected-answer\">\r\n    <div *ngIf=\"selectedAnswer === correctArtist; else incorrectText\">\r\n      <h3>Correct!</h3>\r\n    </div>\r\n\r\n    <div>\r\n      <ng-template #incorrectText>\r\n        <h3>Incorrect! Game over!</h3>\r\n      </ng-template>\r\n    </div>\r\n\r\n    <div>\r\n      <img\r\n        [src]=\"track.album.images[1].url\"\r\n        alt=\"Album Art\"\r\n        class=\"album-art\"\r\n      />\r\n    </div>\r\n\r\n    <app-button\r\n      [buttonText]=\"'Continue'\"\r\n      (click)=\"handleContinue()\"\r\n    ></app-button>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module"}